<?php

/**
 * @file
 * Contains lending_library.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\user\Entity\User;

// --- CONFIGURATION CONSTANTS ---
define('LENDING_LIBRARY_ITEM_NODE_TYPE', 'library_item');

define('LENDING_LIBRARY_ITEM_STATUS_FIELD', 'field_library_item_status');
define('LENDING_LIBRARY_ITEM_BORROWER_FIELD', 'field_library_item_borrower');
define('LENDING_LIBRARY_ITEM_WAITLIST_FIELD', 'field_library_item_waitlist');
define('LENDING_LIBRARY_ITEM_REQUIRES_BATTERIES_FIELD', 'field_library_item_uses_battery');
define('LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD', 'field_library_item_replacement_v');

define('LENDING_LIBRARY_TRANSACTION_ACTION_FIELD', 'field_library_action');
define('LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD', 'field_library_item');
define('LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD', 'field_library_borrower');
define('LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD', 'field_library_inspection_issues');
define('LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD', 'field_library_return_date');
define('LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD', 'field_library_return_inspect_img');
define('LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD', 'field_library_borrow_date');
define('LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD', 'field_library_due_date');
define('LENDING_LIBRARY_TRANSACTION_RENEW_COUNT_FIELD', 'field_library_renew_count');
define('LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD', 'field_library_borrow_batteries');

define('LENDING_LIBRARY_ITEM_STATUS_AVAILABLE', 'available');
define('LENDING_LIBRARY_ITEM_STATUS_BORROWED', 'borrowed');
define('LENDING_LIBRARY_ITEM_STATUS_MISSING', 'missing');
define('LENDING_LIBRARY_ITEM_STATUS_REPAIR', 'repair');
define('LENDING_LIBRARY_ITEM_STATUS_RETIRED', 'retired');

define('LENDING_LIBRARY_ACTION_WITHDRAW', 'withdraw');
define('LENDING_LIBRARY_ACTION_RETURN', 'return');
define('LENDING_LIBRARY_ACTION_ISSUE', 'issue');

define('LENDING_LIBRARY_INSPECTION_NO_ISSUES', 'no_issues');
define('LENDING_LIBRARY_INSPECTION_DAMAGE', 'damage');
define('LENDING_LIBRARY_INSPECTION_MISSING', 'missing');
define('LENDING_LIBRARY_INSPECTION_OTHER', 'other');

define('LENDING_LIBRARY_BATTERY_STATUS_FIELD', 'field_battery_status');
define('LENDING_LIBRARY_BATTERY_BORROWER_FIELD', 'field_battery_borrower');
define('LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD', 'field_battery_current_item');
define('LENDING_LIBRARY_BATTERY_STATUS_AVAILABLE', 'available');
define('LENDING_LIBRARY_BATTERY_STATUS_BORROWED', 'borrowed');
define('LENDING_LIBRARY_BATTERY_STATUS_MISSING', 'missing');
define('LENDING_LIBRARY_BATTERY_STATUS_RETIRED', 'retired');


// --- END CONFIGURATION CONSTANTS ---


/**
 * Helper: get status, borrower, and replacement value from the library_item node.
 */
function _lending_library_get_item_details(NodeInterface $library_item_node = NULL) {
  if (!$library_item_node || $library_item_node->bundle() !== LENDING_LIBRARY_ITEM_NODE_TYPE) {
    return NULL;
  }

  $status = LENDING_LIBRARY_ITEM_STATUS_AVAILABLE;
  if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_STATUS_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_STATUS_FIELD)->isEmpty()) {
    $status = $library_item_node->get(LENDING_LIBRARY_ITEM_STATUS_FIELD)->value;
  }
  else {
    \Drupal::logger('lending_library')->warning('Library item node @nid is missing status field value. Defaulting to available.', ['@nid' => $library_item_node->id()]);
  }

  $borrower_uid = NULL;
  if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_BORROWER_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_BORROWER_FIELD)->isEmpty()) {
    $borrower_uid = (int) $library_item_node->get(LENDING_LIBRARY_ITEM_BORROWER_FIELD)->target_id;
  }

  $replacement_value = NULL;
  if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->isEmpty()) {
    $raw_value = $library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->value;
    if (is_numeric($raw_value)) {
      $replacement_value = $raw_value;
    }
  }

  return [
    'status' => $status,
    'borrower_uid' => $borrower_uid,
    'replacement_value' => $replacement_value,
  ];
}

/**
 * Sends a "due soon" email.
 */
function _lending_library_send_due_soon_email(EntityInterface $transaction) {
  // Flag as notified.
  if ($transaction->hasField('field_library_due_soon_notified')) {
    $transaction->set('field_library_due_soon_notified', 1);
    $transaction->save();
  }
  _lending_library_send_email_by_key($transaction, 'due_soon');
}

/**
 * Helper: get current loan borrow/due dates from latest withdraw transaction.
 */
function _lending_library_get_current_loan_details(NodeInterface $library_item_node) {
  if (!$library_item_node) {
    return NULL;
  }

  $query = \Drupal::entityQuery('library_transaction')
    ->condition('field_library_item', $library_item_node->id())
    ->condition('field_library_action', 'withdraw')
    ->sort('created', 'DESC')
    ->range(0, 1)
    ->accessCheck(FALSE);

  $transaction_ids = $query->execute();
  if (empty($transaction_ids)) {
    return NULL;
  }

  $transaction_id = reset($transaction_ids);
  $transaction = \Drupal::entityTypeManager()->getStorage('library_transaction')->load($transaction_id);
  if (!$transaction) {
    return NULL;
  }

  $borrow_date = NULL;
  if ($transaction->hasField(LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD) && !$transaction->get(LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD)->isEmpty()) {
    $borrow_date = $transaction->get(LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD)->date;
  }

  $due_date = NULL;
  if ($transaction->hasField(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD) && !$transaction->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->isEmpty()) {
    $due_date = $transaction->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->date;
  }

  return ['borrow_date' => $borrow_date, 'due_date' => $due_date];
}


/**
 * Load batteries currently borrowed for a given item + borrower.
 *
 * @param int $item_nid
 * @param int $borrower_uid
 * @return \Drupal\Core\Entity\EntityInterface[]
 */
function _lending_library_load_borrowed_batteries($item_nid, $borrower_uid) {
  $storage = \Drupal::entityTypeManager()->getStorage('battery');

  // Guard: make sure fields exist on the bundle.
  $defs = \Drupal::service('entity_field.manager')->getFieldDefinitions('battery', 'battery');
  foreach ([LENDING_LIBRARY_BATTERY_STATUS_FIELD, LENDING_LIBRARY_BATTERY_BORROWER_FIELD, LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD] as $f) {
    if (!isset($defs[$f])) {
      return [];
    }
  }

  $ids = \Drupal::entityQuery('battery')
    ->accessCheck(FALSE)
    ->condition(LENDING_LIBRARY_BATTERY_STATUS_FIELD . '.value', LENDING_LIBRARY_BATTERY_STATUS_BORROWED)
    ->condition(LENDING_LIBRARY_BATTERY_BORROWER_FIELD, $borrower_uid)
    ->condition(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD, $item_nid)
    ->execute();

  return empty($ids) ? [] : $storage->loadMultiple($ids);
}

/**
 * Mark the provided batteries as returned (available + clear borrower/item).
 *
 * @param \Drupal\Core\Entity\EntityInterface[] $batteries
 */
function _lending_library_return_batteries(array $batteries) {
  foreach ($batteries as $battery) {
    if ($battery->hasField(LENDING_LIBRARY_BATTERY_STATUS_FIELD)) {
      $battery->set(LENDING_LIBRARY_BATTERY_STATUS_FIELD, LENDING_LIBRARY_BATTERY_STATUS_AVAILABLE);
    }
    if ($battery->hasField(LENDING_LIBRARY_BATTERY_BORROWER_FIELD)) {
      $battery->set(LENDING_LIBRARY_BATTERY_BORROWER_FIELD, NULL);
    }
    if ($battery->hasField(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD)) {
      $battery->set(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD, NULL);
    }
    _lending_library_battery_save_with_revision(
      $battery,
      t('Returned independently (battery only) by user @uid.', ['@uid' => \Drupal::currentUser()->id()])
    );
    
  }
}

/**
 * Submit handler to check for manual damage charges and redirect to a confirmation form.
 */
function _lending_library_check_for_damage_charge_submit(array &$form, FormStateInterface $form_state) {
  $transaction = $form_state->getFormObject()->getEntity();

  // Ensure we have the original entity to compare against.
  if (!isset($transaction->original)) {
    return;
  }
  $original_transaction = $transaction->original;

  $is_damage_transaction = FALSE;
  if ($transaction->hasField('field_library_inspection_issues') && $transaction->get('field_library_inspection_issues')->value === 'damage') {
    $is_damage_transaction = TRUE;
  }

  if (!$is_damage_transaction) {
    return;
  }

  $original_amount_due = 0;
  if ($original_transaction->hasField('field_library_amount_due') && !$original_transaction->get('field_library_amount_due')->isEmpty()) {
    $original_amount_due = $original_transaction->get('field_library_amount_due')->value;
  }

  $new_amount_due = 0;
  if ($transaction->hasField('field_library_amount_due') && !$transaction->get('field_library_amount_due')->isEmpty()) {
    $new_amount_due = $transaction->get('field_library_amount_due')->value;
  }

  // If the amount due was increased, redirect to the confirmation form.
  if ($new_amount_due > 0 && $new_amount_due > $original_amount_due) {
    $form_state->setRedirectUrl($transaction->toUrl('canonical')->setRouteParameter('library_transaction', $transaction->id())->setRouteName('lending_library.damage_charge_confirm'));
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for the library_transaction entity form.
 */
function lending_library_form_library_transaction_library_transaction_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (method_exists($form_object, 'getEntity')) {
    $transaction_entity = $form_object->getEntity();
    if ($transaction_entity && $transaction_entity->getEntityTypeId() === 'library_transaction' && $transaction_entity->bundle() === 'library_transaction') {
      _lending_library_transaction_form_logic($form, $form_state, $transaction_entity);
    }
  }
}

/**
 * Apply conditional logic and defaults to library transaction forms.
 */
function _lending_library_transaction_form_logic(&$form, FormStateInterface $form_state, EntityInterface $transaction_entity) {
  $current_user = \Drupal::currentUser();
  $library_item_node = NULL;
  $tool_requires_batteries = FALSE;
  $item_details = NULL;

  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->isEmpty()) {
    $library_item_node_id = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->target_id;
    if ($library_item_node_id) {
      $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($library_item_node_id);
      if ($library_item_node instanceof NodeInterface) {
        $item_details = _lending_library_get_item_details($library_item_node);
        if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_REQUIRES_BATTERIES_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_REQUIRES_BATTERIES_FIELD)->isEmpty()) {
          $tool_requires_batteries = (bool) $library_item_node->get(LENDING_LIBRARY_ITEM_REQUIRES_BATTERIES_FIELD)->value;
        }
      }
    }
  }

  $route_match = \Drupal::routeMatch();
  $predefined_action = $route_match->getParameter('action_type');

  $current_action = $predefined_action;
  if (!$current_action) {
    $action_field_value_from_state = $form_state->getValue(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD);
    if (is_array($action_field_value_from_state) && isset($action_field_value_from_state[0]['value'])) {
      $current_action = $action_field_value_from_state[0]['value'];
    }
    elseif (!is_array($action_field_value_from_state) && !empty($action_field_value_from_state)) {
      $current_action = $action_field_value_from_state;
    }
    elseif ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->isEmpty()) {
      $current_action = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->value;
    }
  }

  // If routed with an explicit action, force it on the entity, hide the widget,
  // and set widget default so the saved value is correct.
  if ($predefined_action && isset($form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD])) {
    $transaction_entity->set(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, $predefined_action);
    if (isset($form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['widget'])) {
      $form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['widget']['#default_value'] = $predefined_action;
    }
    $form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['#access'] = FALSE;
  }

  if ($library_item_node) {
    $info_markup = '<div class="lending-library-form-info">';
    $info_markup .= '<h3>' . $library_item_node->label() . '</h3>';

    $location_parts = [];
    if ($library_item_node->hasField('field_library_location_row_item') && !$library_item_node->get('field_library_location_row_item')->isEmpty()) {
      $location_parts[] = t('Row: @row', ['@row' => $library_item_node->get('field_library_location_row_item')->value]);
    }
    if ($library_item_node->hasField('field_library_location_shelf_num') && !$library_item_node->get('field_library_location_shelf_num')->isEmpty()) {
      $location_parts[] = t('Shelf: @shelf', ['@shelf' => $library_item_node->get('field_library_location_shelf_num')->value]);
    }
    if (!empty($location_parts)) {
      $info_markup .= '<div class="location">' . implode(', ', $location_parts) . '</div>';
    }
    $info_markup .= '</div>';

    $form['tool_info'] = [
      '#markup' => $info_markup,
      '#weight' => -100,
    ];
  }

  if ($predefined_action) {
    switch ($predefined_action) {
      case LENDING_LIBRARY_ACTION_WITHDRAW:
        // Hide fields not edited on Withdraw.
        if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD]['#access'] = FALSE;
        if (isset($form['field_library_inspection_notes'])) $form['field_library_inspection_notes']['#access'] = FALSE;
        break;

        case LENDING_LIBRARY_ACTION_RETURN:
          // Hide borrow/due on Return.
          if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD]['#access'] = FALSE;
          if (isset($form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD]['#access'] = FALSE;
          if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD]['#access'] = FALSE;
          if (isset($form['field_library_borrow_inspect_img'])) $form['field_library_borrow_inspect_img']['#access'] = FALSE;
          if (isset($form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD]['#access'] = FALSE;
          if (isset($form['field_library_inspection_notes'])) $form['field_library_inspection_notes']['#access'] = FALSE;
          if (isset($form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD]['#disabled'] = TRUE;
  
          // Offer to also return associated batteries (if any).
          if ($library_item_node instanceof \Drupal\node\NodeInterface) {
            $borrower_uid = \Drupal::currentUser()->id();
            if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)->isEmpty()) {
              $borrower_uid = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)->target_id;
            }
  
            $bats = _lending_library_load_borrowed_batteries($library_item_node->id(), $borrower_uid);
            if (!empty($bats)) {
              // Render a small list as a reminder.
              $items = [];
              foreach ($bats as $bat) {
                $items[] = $bat->label() . ' (ID ' . $bat->id() . ')';
              }
              $form['lending_library_return_batteries'] = [
                '#type' => 'checkbox',
                '#title' => t('Also return associated batteries'),
                '#default_value' => 1,
                '#weight' => 20,
                '#description' => [
                  '#type' => 'markup',
                  '#markup' => '<div class="description"><strong>' . t('Batteries to return:') . '</strong><br/>' . implode('<br/>', array_map('htmlspecialchars', $items)) . '</div>',
                ],
              ];
            }
          }
          break;
  
  

      case LENDING_LIBRARY_ACTION_ISSUE:
        if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_BORROW_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD]['#access'] = FALSE;
        if (isset($form['field_library_borrow_inspect_img'])) $form['field_library_borrow_inspect_img']['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD]['#access'] = FALSE;
        if (isset($form[LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD])) $form[LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD]['#access'] = FALSE;

        // UI wording for Issue report.
        if (isset($form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD])) {
          $form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD]['#title'] = t('Issue type');
          $form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD]['#description'] = t('Choose the issue you are reporting. "Damage" is one option.');
          $form[LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD]['#required'] = TRUE;
        }
        if (isset($form['field_library_inspection_notes'])) {
          $form['field_library_inspection_notes']['#title'] = t('Issue details');
          $form['field_library_inspection_notes']['#description'] = t('Briefly describe what’s wrong or missing.');
        }
        break;
    }
  }
  else {
    // No predefined action (admin create): restrict actions by state.
    if (isset($form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['widget']['#options']) && $item_details) {
      $allowed_actions = [];
      $original_options = $form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['widget']['#options'];
      switch ($item_details['status']) {
        case LENDING_LIBRARY_ITEM_STATUS_AVAILABLE:
          $allowed_actions[LENDING_LIBRARY_ACTION_WITHDRAW] = TRUE;
          break;
        case LENDING_LIBRARY_ITEM_STATUS_BORROWED:
        case LENDING_LIBRARY_ITEM_STATUS_MISSING:
          if ($item_details['borrower_uid'] == $current_user->id()) {
            $allowed_actions[LENDING_LIBRARY_ACTION_RETURN] = TRUE;
          }
          break;
      }
      $allowed_actions[LENDING_LIBRARY_ACTION_ISSUE] = TRUE;
      $new_options = [];
      if (isset($original_options['_none'])) $new_options['_none'] = $original_options['_none'];
      foreach (array_keys($allowed_actions) as $k) {
        if (isset($original_options[$k])) $new_options[$k] = $original_options[$k];
      }
      $form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['widget']['#options'] = $new_options;
      $form[LENDING_LIBRARY_TRANSACTION_ACTION_FIELD]['#disabled'] = (count($new_options) <= 1 && isset($new_options['_none'])) || count($new_options) === 0;
    }
  }

  // Battery widget visibility: only if item uses batteries AND action is withdraw.
  if (isset($form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD])) {
    $form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD]['#access'] = ($tool_requires_batteries && $current_action === LENDING_LIBRARY_ACTION_WITHDRAW);
  }

  // Attach JS limit when visible on Withdraw.
if (!empty($form[LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD]['#access'])
&& $current_action === LENDING_LIBRARY_ACTION_WITHDRAW) {
  $form['#attached']['library'][] = 'lending_library/battery_limit';
}


  // Button labels + force our submit handler (beats ECK default redirect).
  if (isset($form['actions']['submit'])) {
    switch ($current_action) {
      case LENDING_LIBRARY_ACTION_WITHDRAW:
        $form['actions']['submit']['#value'] = t('Confirm Withdrawal & Agree');
        break;
      case LENDING_LIBRARY_ACTION_RETURN:
        $form['actions']['submit']['#value'] = t('Confirm Return');
        break;
      case LENDING_LIBRARY_ACTION_ISSUE:
        $form['actions']['submit']['#value'] = t('Submit Report');
        break;
    }
    $form['actions']['submit']['#submit'][] = '_lending_library_transaction_form_submit';
    $form['actions']['submit']['#submit'][] = '_lending_library_check_for_damage_charge_submit';
  }

  if ($current_action === LENDING_LIBRARY_ACTION_WITHDRAW) {
    $due_date_display = t('N/A - Due date will be calculated upon withdrawal.');
    if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->isEmpty()) {
      $due_date_value_raw = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->value;
      if ($due_date_value_raw) {
        try {
          $due_date_object = DrupalDateTime::createFromFormat('Y-m-d', $due_date_value_raw);
          if ($due_date_object instanceof DrupalDateTime && empty(DrupalDateTime::getLastErrors())) {
            $due_date_display = \Drupal::service('date.formatter')->format($due_date_object->getTimestamp(), 'long');
          }
        }
        catch (\Exception $e) {
          // Leave default display.
        }
      }
    }

// --- AGREEMENT: config-only (withdraw action) --- //
$terms_html = \Drupal::config('lending_library.settings')->get('loan_terms_html');
if (empty($terms_html)) {
  // Safe fallback if config is empty or not installed yet.
  $terms_html = '<h4>Loan Terms</h4><ul>'
    . '<li><strong>Due Date:</strong> [due_date]</li>'
    . '<li>All tools must be returned within seven (7) days. Late fees apply.</li>'
    . '</ul>';
}

$replacement_value = $item_details['replacement_value'] ?? 0;
$config = \Drupal::config('lending_library.settings');
$non_return_percentage = ($config->get('non_return_charge_percentage') ?: 150) / 100;
$tool_replacement_charge = $replacement_value * $non_return_percentage;

$replacements = [
  '[due_date]' => $due_date_display,
  '[replacement_value]' => number_format($replacement_value, 2),
  '[tool_replacement_charge]' => number_format($tool_replacement_charge, 2),
];

$processed_terms = str_replace(array_keys($replacements), array_values($replacements), $terms_html);

$form['lending_library_agreement_text'] = [
  '#type' => 'markup',
  '#markup' => '<div class="lending-library-agreement">' . $processed_terms . '</div>',
  '#weight' => 50,
];

$form['lending_library_agreement_acknowledge'] = [
  '#type' => 'checkbox',
  '#title' => t('I acknowledge and agree to the terms stated above, including the due date and potential late fees.'),
  '#required' => TRUE,
  '#weight' => 51,
];
// --- END AGREEMENT --- //


  }

  // Keep our validator too.
  $form['#validate'][] = '_lending_library_transaction_form_validate';
}

/**
 * Custom validation handler for library transaction forms.
 */
function _lending_library_transaction_form_validate(&$form, FormStateInterface $form_state) {
  $transaction_entity = $form_state->getFormObject()->getEntity();
  $action = '';
  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->isEmpty()) {
    $action = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->value;
  }
  else {
    $action_value_item = $form_state->getValue(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD);
    $action = is_array($action_value_item) ? ($action_value_item[0]['value'] ?? NULL) : $action_value_item;
  }

  if ($action === LENDING_LIBRARY_ACTION_WITHDRAW) {
    if (!$form_state->getValue('lending_library_agreement_acknowledge')) {
      $form_state->setErrorByName('lending_library_agreement_acknowledge', t('You must acknowledge and agree to the terms before borrowing this tool.'));
    }
  }

  if ($action === LENDING_LIBRARY_ACTION_RETURN) {
    $return_date_element_path = [LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD, 0, 'value'];
    $return_date_value_from_state = $form_state->getValue($return_date_element_path);
    if (empty($return_date_value_from_state)) {
      $today_datetime = new DrupalDateTime('now');
      $form_state->setValue($return_date_element_path, $today_datetime->format('Y-m-d'));
    }
    $return_image_value = $form_state->getValue(LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD);
    if (empty($return_image_value[0]['fids']) && empty($return_image_value[0]['target_id'])) {
      $form_state->setErrorByName(LENDING_LIBRARY_TRANSACTION_RETURN_IMAGE_FIELD, t('Return Inspection Image is required when returning an item.'));
    }
  }

  // Borrow/Return eligibility checks.
  $library_item_node = NULL;
  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->isEmpty()) {
    $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->target_id);
  }
  if ($library_item_node instanceof NodeInterface) {
    $item_details = _lending_library_get_item_details($library_item_node);
    $current_user_id = \Drupal::currentUser()->id();
    if ($action === LENDING_LIBRARY_ACTION_WITHDRAW) {
      if ($item_details && $item_details['status'] !== LENDING_LIBRARY_ITEM_STATUS_AVAILABLE) {
        $form_state->setErrorByName(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, t('This item is not currently available for withdrawal. Its status is: @status.', ['@status' => $item_details['status']]));
      }
    }
    elseif ($action === LENDING_LIBRARY_ACTION_RETURN) {
      if ($item_details && !in_array($item_details['status'], [LENDING_LIBRARY_ITEM_STATUS_BORROWED, LENDING_LIBRARY_ITEM_STATUS_MISSING])) {
        $form_state->setErrorByName(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, t('This item cannot be returned. It is not currently marked as borrowed or missing.'));
      }
      elseif ($item_details && $item_details['borrower_uid'] != $current_user_id) {
        $form_state->setErrorByName(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, t('You are not the current borrower of this item.'));
      }
    }
  }
}

/**
 * Our submit handler (overrides ECK default so our redirect always applies).
 */
function _lending_library_transaction_form_submit(array &$form, FormStateInterface $form_state) {
  $transaction_entity = $form_state->getFormObject()->getEntity();
  if (!$transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD) || $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->isEmpty()) {
    return;
  }
  $action = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->value;

  $library_item_node = NULL;
  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD) && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->isEmpty()) {
    $nid = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->target_id;
    if ($nid) {
      $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    }
  }
  $tool_name = $library_item_node ? $library_item_node->label() : t('The tool');

  switch ($action) {
    case LENDING_LIBRARY_ACTION_WITHDRAW:
      \Drupal::messenger()->addStatus(t('@tool_name has been successfully withdrawn. Please remember to take the tool.', ['@tool_name' => $tool_name]));
      _lending_library_send_checkout_email($transaction_entity);
      $form_state->setRedirectUrl(Url::fromUri('internal:/library/borrowed'));
      break;

      case LENDING_LIBRARY_ACTION_RETURN:
        $borrower_uid = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)->target_id ?: \Drupal::currentUser()->id();
        $charge_applied = FALSE;

        // Check if the return is overdue and charge for unreturned batteries if so.
        $now = new DrupalDateTime('now');
        $t_query = \Drupal::entityQuery('library_transaction')
            ->condition(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD, $library_item_node->id())
            ->condition(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD, $borrower_uid)
            ->condition(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, 'withdraw')
            ->sort('created', 'DESC')->range(0, 1)->accessCheck(FALSE);
        $t_ids = $t_query->execute();
        if (!empty($t_ids)) {
            $withdraw_transaction = \Drupal::entityTypeManager()->getStorage('library_transaction')->load(reset($t_ids));
            $due_date = $withdraw_transaction->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->date;
            if ($due_date < $now) { // Is overdue.
                $unreturned_battery_charge = 0;
                if (!$form_state->getValue('lending_library_return_batteries')) {
                    $unreturned_battery_charge = _lending_library_calculate_unreturned_battery_value($withdraw_transaction);
                }

                if ($unreturned_battery_charge > 0) {
                    $transaction_entity->set('field_library_charge_battery', $unreturned_battery_charge);
                    if ($transaction_entity->hasField('field_field_library_amount_due')) {
                      $transaction_entity->set('field_field_library_amount_due', $unreturned_battery_charge);
                    } elseif ($transaction_entity->hasField('field_library_amount_due')) {
                      $transaction_entity->set('field_library_amount_due', $unreturned_battery_charge);
                    }
                    _lending_library_send_email_by_key($transaction_entity, 'condition_charge', ['amount_due' => $unreturned_battery_charge]);
                    $charge_applied = TRUE;
                }
            }
        }

        \Drupal::messenger()->addStatus(t('@tool_name has been successfully returned. Thank you!', ['@tool_name' => $tool_name]));
  
        // If the checkbox exists and is checked, return associated batteries.
        if ($form_state->getValue('lending_library_return_batteries') && $library_item_node instanceof \Drupal\node\NodeInterface) {
          $bats = _lending_library_load_borrowed_batteries($library_item_node->id(), $borrower_uid);
          if (!empty($bats)) {
            _lending_library_return_batteries($bats);
            \Drupal::messenger()->addStatus(t('Associated batteries have been marked as returned.'));
          }
        }
  
        if (!$charge_applied) {
          _lending_library_send_return_email($transaction_entity);
        }

        if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_WAITLIST_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->isEmpty()) {
          $waitlist_users = $library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->referencedEntities();
          $next_user = reset($waitlist_users);
          if ($next_user) {
            // Notify the next person in line, but do not remove them from the
            // waitlist. They will be removed when they borrow the item, or
            // they can choose to leave the waitlist.
            _lending_library_send_email_by_key($transaction_entity, 'waitlist_notification', ['next_user' => $next_user]);
          }
        }

        $form_state->setRedirectUrl(Url::fromUri('internal:/library'));
        break;
  

    case LENDING_LIBRARY_ACTION_ISSUE:
      \Drupal::messenger()->addStatus(t('Your issue report for @tool_name has been submitted.', ['@tool_name' => $tool_name]));
      _lending_library_send_issue_email($transaction_entity);
      if ($library_item_node) {
        $form_state->setRedirectUrl($library_item_node->toUrl());
      }
      else {
        $form_state->setRedirectUrl(Url::fromUri('internal:/library'));
      }
      break;
  }
}


/**
 * Apply item (and battery) status changes after a transaction is saved.
 * Drop-in replacement for lending_library_entity_insert().
 */
function lending_library_entity_insert(EntityInterface $entity) {
  // Only handle Library Transaction inserts.
  if ($entity->getEntityTypeId() !== 'library_transaction' || $entity->bundle() !== 'library_transaction') {
    return;
  }

  // Must have item reference + action.
  if ($entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->isEmpty()
    || $entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->isEmpty()) {
    return;
  }

  $library_item_node_id = $entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD)->target_id;
  $action = $entity->get(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD)->value;
  $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($library_item_node_id);
  if (!$library_item_node instanceof NodeInterface || $library_item_node->bundle() !== LENDING_LIBRARY_ITEM_NODE_TYPE) {
    return;
  }

  // Borrower: prefer explicit field, otherwise creator/owner.
  $transaction_borrower_uid = $entity->getOwnerId();
  if ($entity->hasField(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)
    && !$entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)->isEmpty()) {
    $transaction_borrower_uid = $entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD)->target_id;
  }

  $save_item_node = FALSE;

  switch ($action) {

    // ---------------------------
    // WITHDRAW
    // ---------------------------
    case LENDING_LIBRARY_ACTION_WITHDRAW:
      $current = $library_item_node->get(LENDING_LIBRARY_ITEM_STATUS_FIELD)->isEmpty()
        ? LENDING_LIBRARY_ITEM_STATUS_AVAILABLE
        : $library_item_node->get(LENDING_LIBRARY_ITEM_STATUS_FIELD)->value;

      if ($current === LENDING_LIBRARY_ITEM_STATUS_AVAILABLE && $transaction_borrower_uid) {
        // If the borrower is on the waitlist, remove them.
        if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_WAITLIST_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->isEmpty()) {
          $waitlist_items = $library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->getValue();
          foreach ($waitlist_items as $delta => $item) {
            if (isset($item['target_id']) && $item['target_id'] == $transaction_borrower_uid) {
              $library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->removeItem($delta);
              break;
            }
          }
        }

        // Update tool.
        $library_item_node->set(LENDING_LIBRARY_ITEM_STATUS_FIELD, LENDING_LIBRARY_ITEM_STATUS_BORROWED);
        $library_item_node->set(LENDING_LIBRARY_ITEM_BORROWER_FIELD, ['target_id' => $transaction_borrower_uid]);
        $save_item_node = TRUE;

        // Update selected batteries to "borrowed".
        if ($entity->hasField(LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD)
          && !$entity->get(LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD)->isEmpty()) {

          $battery_target_ids = array_column($entity->get(LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD)->getValue(), 'target_id');
          if (!empty($battery_target_ids)) {
            $batteries = \Drupal::entityTypeManager()->getStorage('battery')->loadMultiple($battery_target_ids);
            foreach ($batteries as $battery) {
              if ($battery->hasField(LENDING_LIBRARY_BATTERY_STATUS_FIELD)) {
                $battery->set(LENDING_LIBRARY_BATTERY_STATUS_FIELD, LENDING_LIBRARY_BATTERY_STATUS_BORROWED);
              }
              if ($battery->hasField(LENDING_LIBRARY_BATTERY_BORROWER_FIELD) && $transaction_borrower_uid) {
                $battery->set(LENDING_LIBRARY_BATTERY_BORROWER_FIELD, ['target_id' => $transaction_borrower_uid]);
              }
              if ($battery->hasField(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD)) {
                $battery->set(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD, ['target_id' => $library_item_node->id()]);
              }
              _lending_library_battery_save_with_revision(
                $battery,
                t('Borrowed with tool @tool (nid @nid) by user @uid.', [
                  '@tool' => $library_item_node->label(),
                  '@nid'  => $library_item_node->id(),
                  '@uid'  => $transaction_borrower_uid,
                ])
              );
              
              
            }
          }
        }
      }
      break;

    // ---------------------------
    // RETURN
    // ---------------------------
    case LENDING_LIBRARY_ACTION_RETURN:
      // Update tool status.
      $library_item_node->set(LENDING_LIBRARY_ITEM_STATUS_FIELD, LENDING_LIBRARY_ITEM_STATUS_AVAILABLE);
      $library_item_node->set(LENDING_LIBRARY_ITEM_BORROWER_FIELD, NULL);
      $save_item_node = TRUE;

      // Ensure return date is set on the transaction.
      if ($entity->hasField(LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD) && $entity->get(LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD)->isEmpty()) {
        $entity->set(LENDING_LIBRARY_TRANSACTION_RETURN_DATE_FIELD, ['value' => (new DrupalDateTime('now'))->format('Y-m-d')]);
      }

      // Note: The logic to mark batteries as returned is in _lending_library_transaction_form_submit(),
      // based on user input from the form. The previous broad logic here was a bug.

      // If you added a "closed" boolean on transactions, mark it.
      if ($entity->hasField('field_library_closed')) {
        try { $entity->set('field_library_closed', 1); } catch (\Exception $ignore) {}
      }
      break;

    // ---------------------------
    // ISSUE
    // ---------------------------
    case LENDING_LIBRARY_ACTION_ISSUE:
      $new_status_based_on_issue = NULL;
      if ($entity->hasField(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)
        && !$entity->get(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)->isEmpty()) {
        $issue_type = $entity->get(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)->value;
        switch ($issue_type) {
          case LENDING_LIBRARY_INSPECTION_MISSING:
            $new_status_based_on_issue = LENDING_LIBRARY_ITEM_STATUS_MISSING;
            break;

          case LENDING_LIBRARY_INSPECTION_DAMAGE:
          case LENDING_LIBRARY_INSPECTION_OTHER:
            $new_status_based_on_issue = LENDING_LIBRARY_ITEM_STATUS_REPAIR;
            break;

          case LENDING_LIBRARY_INSPECTION_NO_ISSUES:
            $new_status_based_on_issue = LENDING_LIBRARY_ITEM_STATUS_AVAILABLE;
            break;
        }
      }

      if ($new_status_based_on_issue) {
        $library_item_node->set(LENDING_LIBRARY_ITEM_STATUS_FIELD, $new_status_based_on_issue);
        // If an item is no longer borrowed (available or in for repair), clear the borrower.
        if (in_array($new_status_based_on_issue, [LENDING_LIBRARY_ITEM_STATUS_AVAILABLE, LENDING_LIBRARY_ITEM_STATUS_REPAIR])) {
          $library_item_node->set(LENDING_LIBRARY_ITEM_BORROWER_FIELD, NULL);
        }
        $save_item_node = TRUE;

        // If item marked Missing, optionally tag any linked borrowed batteries as Missing too.
        if ($new_status_based_on_issue === LENDING_LIBRARY_ITEM_STATUS_MISSING) {
          try {
            $query = \Drupal::entityQuery('battery')->accessCheck(FALSE);
            $defs = \Drupal::service('entity_field.manager')->getFieldDefinitions('battery', 'battery');
            if (isset($defs[LENDING_LIBRARY_BATTERY_STATUS_FIELD])) {
              $query->condition(LENDING_LIBRARY_BATTERY_STATUS_FIELD . '.value', LENDING_LIBRARY_BATTERY_STATUS_BORROWED);
            }
            if (isset($defs[LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD])) {
              $query->condition(LENDING_LIBRARY_BATTERY_CURRENT_ITEM_FIELD, $library_item_node->id());
            }
            $ids = $query->execute();
            if ($ids) {
              $bats = \Drupal::entityTypeManager()->getStorage('battery')->loadMultiple($ids);
              foreach ($bats as $battery) {
                if ($battery->hasField(LENDING_LIBRARY_BATTERY_STATUS_FIELD)) {
                  $battery->set(LENDING_LIBRARY_BATTERY_STATUS_FIELD, LENDING_LIBRARY_BATTERY_STATUS_MISSING);
                }
                _lending_library_battery_save_with_revision(
                  $battery,
                  t('Marked MISSING because tool @tool (nid @nid) was reported missing.', [
                    '@tool' => $library_item_node->label(),
                    '@nid'  => $library_item_node->id(),
                  ])
                );
                
                
              }
            }
          } catch (\Exception $e) {
            \Drupal::logger('lending_library')->error('Error updating batteries on missing issue: @msg', ['@msg' => $e->getMessage()]);
          }
        }
      }
      break;
  }

  if ($save_item_node) {
    try {
      $library_item_node->save();
    }
    catch (\Exception $e) {
      \Drupal::logger('lending_library')->error(
        'Failed to save library item @nid after transaction: @msg',
        ['@nid' => $library_item_node->id(), '@msg' => $e->getMessage()]
      );
    }
  }
  
}

/**
 * Implements hook_cron().
 *
 * Finds overdue items and sends notifications or applies charges.
 */
function lending_library_cron() {
  $logger = \Drupal::logger('lending_library');
  $logger->notice('Lending library cron job started.');

  $now = new DrupalDateTime('now');
  $config = \Drupal::config('lending_library.settings');

  // Get all fee settings.
  $overdue_charge_days = $config->get('overdue_charge_days') ?: 30;
  $non_return_charge_percentage = $config->get('non_return_charge_percentage') ?: 150;
  $daily_late_fee = $config->get('daily_late_fee') ?: 10;
  $late_fee_cap_percentage = $config->get('late_fee_cap_percentage') ?: 50;
  $enable_overdue_notifications = $config->get('enable_overdue_notifications');

  // Find all items that are currently borrowed or missing.
  $query = \Drupal::entityQuery('node')
    ->condition('type', LENDING_LIBRARY_ITEM_NODE_TYPE)
    ->condition(LENDING_LIBRARY_ITEM_STATUS_FIELD, [LENDING_LIBRARY_ITEM_STATUS_BORROWED, LENDING_LIBRARY_ITEM_STATUS_MISSING], 'IN')
    ->accessCheck(FALSE);
  $item_ids = $query->execute();

  if (empty($item_ids)) {
    $logger->notice('Cron: No borrowed or missing items found.');
    return;
  }

  $items = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($item_ids);

  foreach ($items as $item) {
    // Get the latest 'withdraw' transaction for this item to find the due date.
    $t_query = \Drupal::entityQuery('library_transaction')
      ->condition(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD, $item->id())
      ->condition(LENDING_LIBRARY_TRANSACTION_ACTION_FIELD, 'withdraw')
      ->sort('created', 'DESC')
      ->range(0, 1)
      ->accessCheck(FALSE);
    $t_ids = $t_query->execute();
    if (empty($t_ids)) {
      continue;
    }
    $transaction = \Drupal::entityTypeManager()->getStorage('library_transaction')->load(reset($t_ids));

    if ($transaction->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->isEmpty()) {
      continue;
    }

    $due_date = $transaction->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->date;

    if ($due_date > $now) {
      // Not overdue yet. Check for due soon.
      $one_day_interval = new \DateInterval('P1D');
      $due_soon_threshold = (clone $now)->add($one_day_interval);

      if ($due_date < $due_soon_threshold) {
        // Due within 24 hours.
        if ($config->get('enable_due_soon_notifications')) {
          if ($transaction->hasField('field_library_due_soon_notified') && !$transaction->get('field_library_due_soon_notified')->value) {
            _lending_library_send_due_soon_email($transaction);
          }
        }
      }
    }
    else {
      // Overdue.
      if (!$enable_overdue_notifications) {
        continue;
      }

      $days_overdue = $due_date->diff($now)->days;

      // Check if it's time for the final non-return charge.
      if ($days_overdue >= $overdue_charge_days) {
        if ($transaction->hasField('field_library_30day_processed') && $transaction->get('field_library_30day_processed')->value) {
          continue;
        }
        _lending_library_process_non_return_charge($transaction, $non_return_charge_percentage);
      }
      // Otherwise, if daily late fees are enabled, process them.
      elseif ($daily_late_fee > 0) {
        $item_details = _lending_library_get_item_details($item);
        $replacement_value = $item_details['replacement_value'] ?? 0;

        if ($replacement_value > 0) {
          $late_fee_cap = $replacement_value * ($late_fee_cap_percentage / 100);
          $cumulative_late_fee = $days_overdue * $daily_late_fee;
          $final_late_fee = min($cumulative_late_fee, $late_fee_cap);

          $current_amount_due = 0;
          if ($transaction->hasField('field_library_amount_due') && !$transaction->get('field_library_amount_due')->isEmpty()) {
              $current_amount_due = $transaction->get('field_library_amount_due')->value;
          }

          if ($final_late_fee > $current_amount_due) {
            $transaction->set('field_library_amount_due', $final_late_fee);
            if ($transaction->hasField('field_library_charge_overdue')) {
                $transaction->set('field_library_charge_overdue', $final_late_fee);
            }
            $transaction->save();

            if (!$transaction->hasField('field_library_overdue_notified') || !$transaction->get('field_library_overdue_notified')->value) {
              _lending_library_send_email_by_key($transaction, 'overdue_late_fee', [
                'amount_due' => $final_late_fee,
                'transaction_id' => $transaction->id(),
              ]);
              if ($transaction->hasField('field_library_overdue_notified')) {
                $transaction->set('field_library_overdue_notified', 1);
                $transaction->save();
              }
            }
          }
        }
      }
    }
  }

  $logger->notice('Lending library cron job finished.');
}

/**
 * Processes a transaction for a non-returned item.
 */
function _lending_library_process_non_return_charge(EntityInterface $transaction, $non_return_charge_percentage) {
  $item_ref = $transaction->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD);
  if ($item_ref->isEmpty()) {
    return;
  }
  $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($item_ref->target_id);
  if (!$library_item_node) {
    return;
  }

  $replacement_value = 0;
  if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD) && !$library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->isEmpty()) {
    $replacement_value = $library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->value;
  }

  $replacement_charge = $replacement_value * ($non_return_charge_percentage / 100);

  $battery_value = _lending_library_calculate_unreturned_battery_value($transaction);
  $battery_charge = $battery_value * ($non_return_charge_percentage / 100);

  $total_due = $replacement_charge + $battery_charge;

  if ($transaction->hasField('field_library_charge_replacement')) {
    $transaction->set('field_library_charge_replacement', $replacement_charge);
  }
  if ($transaction->hasField('field_library_charge_battery')) {
    $transaction->set('field_library_charge_battery', $battery_charge);
  }
  // The user mentioned field_field_library_amount_due, which is likely a typo for field_library_amount_due.
  if ($transaction->hasField('field_library_amount_due')) {
      $transaction->set('field_library_amount_due', $total_due);
  } else if ($transaction->hasField('field_field_library_amount_due')) {
      $transaction->set('field_field_library_amount_due', $total_due);
  }


  // Flag as processed.
  if ($transaction->hasField('field_library_30day_processed')) {
    $transaction->set('field_library_30day_processed', 1);
  }

  $transaction->save();

  // Send email
  _lending_library_send_email_by_key($transaction, 'overdue_30_day', [
    'amount_due' => $total_due,
    'unreturned_batteries_charge' => $battery_charge,
    'tool_replacement_charge' => $replacement_charge,
    'transaction_id' => $transaction->id(),
  ]);
}

/**
 * Helper to send email based on a key.
 */
function _lending_library_send_email_by_key(EntityInterface $transaction, $key, $extra_params = []) {
    if ($key === 'waitlist_notification' && isset($extra_params['next_user'])) {
      $borrower_user = $extra_params['next_user'];
    }
    else {
      $borrower_ref = $transaction->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD);
      if ($borrower_ref->isEmpty()) return;
      $borrower_user = User::load($borrower_ref->target_id);
    }

    if (!$borrower_user || !$borrower_user->getEmail()) return;

    $item_ref = $transaction->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD);
    if ($item_ref->isEmpty()) return;
    $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($item_ref->target_id);
    if (!$library_item_node) return;

    $params = [
        'tool_name' => $library_item_node->label(),
        'borrower_name' => $borrower_user->getDisplayName(),
    ] + $extra_params;

    $from = \Drupal::config('system.site')->get('mail');
    \Drupal::service('plugin.manager.mail')->mail(
        'lending_library',
        $key,
        $borrower_user->getEmail(),
        $borrower_user->getPreferredLangcode(),
        $params,
        $from,
        TRUE
    );
}

/**
 * Calculates the value of unreturned batteries for a transaction.
 */
function _lending_library_calculate_unreturned_battery_value(EntityInterface $transaction) {
    $borrowed_batteries_ref = $transaction->get(LENDING_LIBRARY_TRANSACTION_BORROW_BATTERIES_FIELD);
    if ($borrowed_batteries_ref->isEmpty()) {
        return 0;
    }

    $total_value = 0;
    $borrowed_batteries = $borrowed_batteries_ref->referencedEntities();
    foreach ($borrowed_batteries as $battery) {
        // A battery is considered unreturned if it's still linked to the transaction.
        // The return process should remove it from the transaction.
        if ($battery->hasField('field_battery_value') && !$battery->get('field_battery_value')->isEmpty()) {
            $total_value += $battery->get('field_battery_value')->value;
        }
    }
    return $total_value;
}


/**
 * Implements hook_entity_view().
 */
function lending_library_entity_view(array &$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === LENDING_LIBRARY_ITEM_NODE_TYPE && $view_mode === 'full') {
    $current_user = \Drupal::currentUser();
    $library_item_node = $entity;
    $item_details = _lending_library_get_item_details($library_item_node);

    if ($item_details) {
      $status_class = 'status-' . preg_replace('/[^a-z0-9\-]+/', '-', strtolower($item_details['status']));
      $status_markup = '<div class="lending-library-status ' . $status_class . '">';
      $status_markup .= '<strong>' . t('Status:') . '</strong> ' . ucfirst($item_details['status']);

      if ($item_details['status'] === LENDING_LIBRARY_ITEM_STATUS_BORROWED && $item_details['borrower_uid']) {
        if (!$current_user->isAnonymous()) {
          $borrower_account = User::load($item_details['borrower_uid']);
          if ($borrower_account) {
            $borrower_link = Link::fromTextAndUrl($borrower_account->getDisplayName(), $borrower_account->toUrl())->toString();
            $status_markup .= ' ' . t('by @username', ['@username' => $borrower_link]);

            $loan_details = _lending_library_get_current_loan_details($library_item_node);
            if ($loan_details) {
              $date_formatter = \Drupal::service('date.formatter');
              if (!empty($loan_details['borrow_date'])) {
                $status_markup .= '<br/><strong>' . t('Borrowed:') . '</strong> ' . $date_formatter->format($loan_details['borrow_date']->getTimestamp(), 'custom', 'F j, Y');
              }
              if (!empty($loan_details['due_date'])) {
                $status_markup .= '<br/><strong>' . t('Due:') . '</strong> ' . $date_formatter->format($loan_details['due_date']->getTimestamp(), 'custom', 'F j, Y');
              }
            }
          }
        }
      }
      $status_markup .= '</div>';
      $build['lending_library_status'] = [
        '#markup' => $status_markup,
        '#weight' => -10,
      ];
    }

    if (!$current_user->hasRole('borrower')) {
      return;
    }

    $links = [];
    if ($item_details) {
      if ($item_details['status'] === LENDING_LIBRARY_ITEM_STATUS_AVAILABLE) {
        $url = Url::fromRoute('lending_library.withdraw_form', ['node' => $library_item_node->id()]);
        $links['withdraw'] = ['#type' => 'link', '#title' => t('Withdraw This Item'), '#url' => $url, '#attributes' => ['class' => ['button', 'button--primary', 'lending-library-button']]];
      }
      if (in_array($item_details['status'], [LENDING_LIBRARY_ITEM_STATUS_BORROWED, LENDING_LIBRARY_ITEM_STATUS_MISSING]) && $item_details['borrower_uid'] == $current_user->id()) {
        $url = Url::fromRoute('lending_library.return_form', ['node' => $library_item_node->id()]);
        $links['return'] = ['#type' => 'link', '#title' => t('Return This Item'), '#url' => $url, '#attributes' => ['class' => ['button', 'button--primary', 'lending-library-button']]];
      }
      if (in_array($item_details['status'], [LENDING_LIBRARY_ITEM_STATUS_BORROWED, LENDING_LIBRARY_ITEM_STATUS_REPAIR, LENDING_LIBRARY_ITEM_STATUS_MISSING]) && $library_item_node->hasField(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)) {
        $waitlist_users = $library_item_node->get(LENDING_LIBRARY_ITEM_WAITLIST_FIELD)->getValue();
        $user_ids = array_column($waitlist_users, 'target_id');
        if (in_array($current_user->id(), $user_ids)) {
          $url = Url::fromRoute('lending_library.waitlist_remove', ['node' => $library_item_node->id()]);
          $links['waitlist'] = ['#type' => 'link', '#title' => t('Leave Waitlist'), '#url' => $url, '#attributes' => ['class' => ['button', 'lending-library-button']]];
        }
        else {
          // Do not show "Get in Line" to the current borrower of the item.
          if ($item_details['borrower_uid'] !== $current_user->id()) {
            $url = Url::fromRoute('lending_library.waitlist_add', ['node' => $library_item_node->id()]);
            $links['waitlist'] = ['#type' => 'link', '#title' => t('Get in Line'), '#url' => $url, '#attributes' => ['class' => ['button', 'lending-library-button']]];
          }
        }
      }
      if ($item_details['status'] !== LENDING_LIBRARY_ITEM_STATUS_RETIRED) {
        $url = Url::fromRoute('lending_library.issue_form', ['node' => $library_item_node->id()]);
        $links['report_issue'] = ['#type' => 'link', '#title' => t('Report Issue'), '#url' => $url, '#attributes' => ['class' => ['button', 'button--warning', 'lending-library-button']]];
      }
    }
    if (!empty($links)) {
      $build['lending_library_actions'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['lending-library-action-buttons']],
        '#weight' => 100,
        'actions' => $links,
        '#prefix' => '<div class="lending-library-actions-wrapper">',
        '#suffix' => '</div>',
      ];
      $build['#attached']['library'][] = 'lending_library/lending_library.actions';
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
function lending_library_library_info_build() {
  $libraries['lending_library.actions'] = [
    'css' => [
      'theme' => [
        'css/lending_library_actions.css' => [],
        'css/lending_library.css' => [],
      ],
    ],
  ];

  $libraries['lending_library.battery_limit'] = [
    'js' => [
      'js/battery_limit.js' => [],
    ],
    'dependencies' => [
      'core/drupal',
      'core/jquery',
    ],
  ];

  return $libraries;
}


/**
 * Save a Battery entity. If the entity type is revisionable, create a new revision;
 * otherwise just do a normal save.
 */
function _lending_library_battery_save_with_revision(EntityInterface $battery, $message = '', $uid = NULL) {
  try {
    // Only set revision flags if the entity type actually supports revisions.
    if ($battery->getEntityType()->isRevisionable()) {
      $battery->setNewRevision(TRUE);

      if ($uid === NULL) {
        $uid = \Drupal::currentUser()->id();
      }
      if (method_exists($battery, 'setRevisionUserId')) {
        $battery->setRevisionUserId($uid);
      }
      if (method_exists($battery, 'setRevisionCreationTime')) {
        $battery->setRevisionCreationTime(\Drupal::time()->getRequestTime());
      }
      if (method_exists($battery, 'setRevisionLogMessage') && $message !== '') {
        $battery->setRevisionLogMessage($message);
      }
    }

    $battery->save();
  }
  catch (\Exception $e) {
    \Drupal::logger('lending_library')->error('Failed to save battery @id: @msg', [
      '@id' => method_exists($battery, 'id') ? $battery->id() : 'unknown',
      '@msg' => $e->getMessage(),
    ]);
  }
}



/**
 * Process callback to add the 'capture' attribute to file inputs.
 */
function _lending_library_add_capture_attribute(&$element, FormStateInterface $form_state, &$complete_form) {
  if (isset($element['upload'])) {
    $element['upload']['#attributes']['capture'] = 'environment';
  }
  return $element;
}

/**
 * Sends a checkout confirmation email to the borrower.
 */
function _lending_library_send_checkout_email(EntityInterface $transaction_entity) {
  $borrower_ref = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD);
  if ($borrower_ref->isEmpty()) return;
  $borrower_user = User::load($borrower_ref->target_id);
  if (!$borrower_user || !$borrower_user->getEmail()) return;

  $item_ref = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD);
  if ($item_ref->isEmpty()) return;
  $library_item_node = \Drupal::entityTypeManager()->getStorage('node')->load($item_ref->target_id);
  if (!$library_item_node) return;

  $due_date = '';
  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)
    && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->isEmpty()
    && $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->date instanceof \Drupal\Core\Datetime\DrupalDateTime) {
    $due_date = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_DUE_DATE_FIELD)->date->format('F j, Y');
  }

  $replacement_value = '';
  if ($library_item_node->hasField(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)
    && !$library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->isEmpty()
    && is_numeric($library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->value)) {
    $replacement_value = $library_item_node->get(LENDING_LIBRARY_ITEM_REPLACEMENT_VALUE_FIELD)->value;
  }

  $params = [
    'tool_name' => $library_item_node->label(),
    'replacement_value' => $replacement_value,
    'due_date' => $due_date,
  ];

  $from = \Drupal::config('system.site')->get('mail');
  $result = \Drupal::service('plugin.manager.mail')->mail(
    'lending_library',
    'checkout_confirmation',
    $borrower_user->getEmail(),
    $borrower_user->getPreferredLangcode(),
    $params,
    $from,
    TRUE
  );
  if (empty($result['result'])) {
    \Drupal::logger('lending_library')->error('Failed to send checkout email to @email.', ['@email' => $borrower_user->getEmail()]);
  }
}

/**
 * Sends a return confirmation email to the borrower.
 */
function _lending_library_send_return_email(EntityInterface $transaction_entity) {
  $borrower_ref = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_BORROWER_FIELD);
  if ($borrower_ref->isEmpty()) return;
  $borrower = User::load($borrower_ref->target_id);
  if (!$borrower || !$borrower->getEmail()) return;

  $item_ref = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD);
  if ($item_ref->isEmpty()) return;
  $item = \Drupal::entityTypeManager()->getStorage('node')->load($item_ref->target_id);
  if (!$item) return;

  $params = ['tool_name' => $item->label()];

  $from = \Drupal::config('system.site')->get('mail');
  $result = \Drupal::service('plugin.manager.mail')->mail(
    'lending_library',
    'return_confirmation',
    $borrower->getEmail(),
    $borrower->getPreferredLangcode(),
    $params,
    $from,
    TRUE
  );
  if (empty($result['result'])) {
    \Drupal::logger('lending_library')->error('Failed to send return email to @email.', ['@email' => $borrower->getEmail()]);
  }
}

/**
 * Sends an issue report notification to staff.
 */
function _lending_library_send_issue_email(EntityInterface $transaction_entity) {
  $item_ref = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_ITEM_REF_FIELD);
  if ($item_ref->isEmpty()) return;
  $item = \Drupal::entityTypeManager()->getStorage('node')->load($item_ref->target_id);
  if (!$item) return;

  $reporter = User::load($transaction_entity->getOwnerId());
  $reporter_name = $reporter ? $reporter->getDisplayName() : t('Unknown user');

  $issue = '';
  if ($transaction_entity->hasField(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)
    && !$transaction_entity->get(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)->isEmpty()) {
    $issue = $transaction_entity->get(LENDING_LIBRARY_TRANSACTION_INSPECTION_ISSUES_FIELD)->value;
  }

  $notes = '';
  if ($transaction_entity->hasField('field_library_inspection_notes')
    && !$transaction_entity->get('field_library_inspection_notes')->isEmpty()) {
    $notes = $transaction_entity->get('field_library_inspection_notes')->value;
  }

  $params = [
    'tool_name' => $item->label(),
    'issue_type' => $issue,
    'notes' => $notes,
    'reporter' => $reporter_name,
    'item_url' => $item->toUrl('canonical', ['absolute' => TRUE])->toString(),
  ];

  $config = \Drupal::config('lending_library.settings');
  $to = $config->get('email_staff_address') ?: \Drupal::config('system.site')->get('mail');
  $from = \Drupal::config('system.site')->get('mail');

  $result = \Drupal::service('plugin.manager.mail')->mail(
    'lending_library',
    'issue_report_notice',
    $to,
    \Drupal::languageManager()->getDefaultLanguage()->getId(),
    $params,
    $from,
    TRUE
  );
  if (empty($result['result'])) {
    \Drupal::logger('lending_library')->error('Failed to send issue notice to @email.', ['@email' => $to]);
  }
}


/**
 * Implements hook_mail().
 * Uses site email as From and supports configurable message text.
 */
function lending_library_mail($key, &$message, $params) {
  // Ensure "From" is set to site email to satisfy SMTP providers.
  $site_from = \Drupal::config('system.site')->get('mail');
  if (!empty($site_from)) {
    $message['from'] = $site_from;
  }

  // Optional Reply-To support (pass 'reply_to' via $params from caller).
  if (!empty($params['reply_to'])) {
    $message['headers']['Reply-To'] = $params['reply_to'];
  }

  $cfg = \Drupal::config('lending_library.settings');

  // Generate payment link if applicable.
  if (isset($params['amount_due']) && $params['amount_due'] > 0) {
    $paypal_email = $cfg->get('paypal_email');
    if (!empty($paypal_email)) {
      $item_name_encoded = urlencode($params['tool_name'] . ' - Library Fee');
      $amount_encoded = urlencode($params['amount_due']);
      // The transaction ID is not available here directly, but can be passed in params.
      $custom_encoded = isset($params['transaction_id']) ? urlencode($params['transaction_id']) : '';
      $paypal_email_encoded = urlencode($paypal_email);
      $params['payment_link'] = "https://www.paypal.com/cgi-bin/webscr?cmd=_cart&business={$paypal_email_encoded}&lc=US&item_name={$item_name_encoded}&amount={$amount_encoded}&currency_code=USD&button_subtype=products&no_note=1&add=1&custom={$custom_encoded}&bn=PP-ShopCartBF%3Abtn_cart_SM.gif%3ANonHosted&no_shipping=1&tax_rate=0";
    }
  }

  // Centralized replacement logic.
  $replacements = [
    '[tool_name]' => $params['tool_name'] ?? '',
    '[borrower_name]' => $params['borrower_name'] ?? '',
    '[amount_due]' => isset($params['amount_due']) ? '$' . number_format($params['amount_due'], 2) : '',
    '[payment_link]' => $params['payment_link'] ?? '',
    '[tool_replacement_charge]' => isset($params['tool_replacement_charge']) ? '$' . number_format($params['tool_replacement_charge'], 2) : '',
    '[unreturned_batteries_charge]' => isset($params['unreturned_batteries_charge']) ? '$' . number_format($params['unreturned_batteries_charge'], 2) : '',
    '[replacement_value]' => isset($params['replacement_value']) ? '$' . number_format($params['replacement_value'], 2) : '',
    '[due_date]' => $params['due_date'] ?? '',
    '[issue_type]' => $params['issue_type'] ?? '',
    '[notes]' => $params['notes'] ?? '',
    '[reporter]' => $params['reporter'] ?? '',
    '[item_url]' => $params['item_url'] ?? '',
  ];

  $subject = '';
  $body_template = '';

  switch ($key) {
    case 'checkout_confirmation':
      $subject = $cfg->get('email_checkout_subject') ?: 'Tool Checkout Confirmation: [tool_name]';
      $body_template = $cfg->get('email_checkout_body') ?: "You have successfully checked out the following tool:\n\nTool: [tool_name]\nReplacement Value: [replacement_value]\nDue on or before: [due_date].";
      break;

    case 'return_confirmation':
      $subject = $cfg->get('email_return_subject') ?: 'Tool Return Confirmation';
      $body_template = $cfg->get('email_return_body') ?: "Thanks! Your return has been recorded.\nTool: [tool_name]";
      break;

    case 'issue_report_notice':
      $subject = $cfg->get('email_issue_report_subject') ?: 'Lending Library Issue Report: [tool_name]';
      $body_template = $cfg->get('email_issue_report_body') ?: "A member submitted an issue report.\n\nTool: [tool_name]\nIssue type: [issue_type]\nDetails: [notes]\nReported by: [reporter]\nItem page: [item_url]";
      break;

    case 'due_soon':
      $subject = $cfg->get('email_due_soon_subject') ?: 'Your borrowed tool is due soon';
      $body_template = $cfg->get('email_due_soon_body') ?: "Hello [borrower_name],\n\nThis is a reminder that the tool '[tool_name]' you borrowed is due tomorrow. Please return it on time to avoid late fees.";
      break;

    case 'overdue_late_fee':
      $subject = $cfg->get('email_overdue_late_fee_subject') ?: 'Late fee added for overdue tool';
      $body_template = $cfg->get('email_overdue_late_fee_body') ?: "Hello [borrower_name],\n\nThe tool '[tool_name]' you borrowed is overdue. A late fee of [amount_due] has been applied to your account. Please return the tool as soon as possible to avoid further fees. You can pay the current balance here: [payment_link]";
      break;

    case 'overdue_30_day': // This key is kept for the non-return charge.
      $subject = $cfg->get('email_non_return_charge_subject') ?: 'Charge for unreturned library tool';
      $body_template = $cfg->get('email_non_return_charge_body') ?: "Hello [borrower_name],\n\nThe tool '[tool_name]' is now considered lost. You are being charged [amount_due] for its replacement. Please use the following link to pay: [payment_link]";
      break;

    case 'condition_charge':
      $subject = $cfg->get('email_condition_charge_subject') ?: 'Charge for tool damage or missing parts';
      $body_template = $cfg->get('email_condition_charge_body') ?: "Hello [borrower_name],\n\nA charge of [amount_due] has been added to your account for the tool '[tool_name]' due to its condition upon return. Please use the following link to pay: [payment_link]";
      break;

    case 'waitlist_notification':
      $subject = $cfg->get('email_waitlist_notification_subject') ?: 'A tool you are waiting for is now available';
      $body_template = $cfg->get('email_waitlist_notification_body') ?: "Hello [borrower_name],\n\nThe tool '[tool_name]' you were waiting for has been returned and is now available for checkout.";
      break;
  }

  if (!empty($subject) && !empty($body_template)) {
    $message['subject'] = str_replace(array_keys($replacements), array_values($replacements), $subject);
    $message['body'][] = str_replace(array_keys($replacements), array_values($replacements), $body_template);
  }
}

